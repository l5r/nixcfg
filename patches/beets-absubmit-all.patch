--- /beetsplug/absubmit.py
+++ /beetsplug/absubmit.py
@@ -23,6 +23,7 @@
 import subprocess
 import tempfile
 
+from collections import defaultdict
 from distutils.spawn import find_executable
 import requests
 
@@ -32,6 +32,6 @@
 
 # We use this field to check whether AcousticBrainz info is present.
-PROBE_FIELD = 'mood_acoustic'
+PROBE_FIELD = 'danceable'
 
 
 class ABSubmitError(Exception):
@@ -137,10 +138,10 @@ def _get_analysis(self, item):
                 return None
 
         # If file has no MBID, skip it.
-        if not mbid:
-            self._log.info('Not analysing {}, missing '
-                           'musicbrainz track id.', item)
-            return None
+        # if not mbid:
+        #     self._log.info('Not analysing {}, missing '
+        #                    'musicbrainz track id.', item)
+        #     return None
 
         if self.opts.pretend_fetch or self.config['pretend']:
             self._log.info('pretend action - extract item: {}', item)
@@ -177,20 +178,186 @@ def _get_analysis(self, item):
                     raise
 
     def _submit_data(self, item, data):
-        mbid = item['mb_trackid']
-        headers = {'Content-Type': 'application/json'}
-        response = requests.post(self.base_url.format(mbid=mbid),
-                                 json=data, headers=headers)
-        # Test that request was successful and raise an error on failure.
-        if response.status_code != 200:
-            try:
-                message = response.json()['message']
-            except (ValueError, KeyError) as e:
-                message = f'unable to get error message: {e}'
-            self._log.error(
-                'Failed to submit AcousticBrainz analysis of {item}: '
-                '{message}).', item=item, message=message
-            )
-        else:
-            self._log.debug('Successfully submitted AcousticBrainz analysis '
-                            'for {}.', item)
+        if data:
+            for attr, val in self._map_data_to_scheme(data, ABSCHEME):
+                self._log.debug('attribute {} of {} set to {}',
+                                attr,
+                                item,
+                                val)
+                setattr(item, attr, val)
+            item.store()
+            item.try_write()
+
+    def _map_data_to_scheme(self, data, scheme):
+        """Given `data` as a structure of nested dictionaries, and
+        `scheme` as a structure of nested dictionaries , `yield` tuples
+        `(attr, val)` where `attr` and `val` are corresponding leaf
+        nodes in `scheme` and `data`.
+        As its name indicates, `scheme` defines how the data is structured,
+        so this function tries to find leaf nodes in `data` that correspond
+        to the leafs nodes of `scheme`, and not the other way around.
+        Leaf nodes of `data` that do not exist in the `scheme` do not matter.
+        If a leaf node of `scheme` is not present in `data`,
+        no value is yielded for that attribute and a simple warning is issued.
+        Finally, to account for attributes of which the value is split between
+        several leaf nodes in `data`, leaf nodes of `scheme` can be tuples
+        `(attr, order)` where `attr` is the attribute to which the leaf node
+        belongs, and `order` is the place at which it should appear in the
+        value. The different `value`s belonging to the same `attr` are simply
+        joined with `' '`. This is hardcoded and not very flexible, but it gets
+        the job done.
+        For example:
+        >>> scheme = {
+            'key1': 'attribute',
+            'key group': {
+                'subkey1': 'subattribute',
+                'subkey2': ('composite attribute', 0)
+            },
+            'key2': ('composite attribute', 1)
+        }
+        >>> data = {
+            'key1': 'value',
+            'key group': {
+                'subkey1': 'subvalue',
+                'subkey2': 'part 1 of composite attr'
+            },
+            'key2': 'part 2'
+        }
+        >>> print(list(_map_data_to_scheme(data, scheme)))
+        [('subattribute', 'subvalue'),
+         ('attribute', 'value'),
+         ('composite attribute', 'part 1 of composite attr part 2')]
+        """
+        # First, we traverse `scheme` and `data`, `yield`ing all the non
+        # composites attributes straight away and populating the dictionary
+        # `composites` with the composite attributes.
+
+        # When we are finished traversing `scheme`, `composites` should
+        # map each composite attribute to an ordered list of the values
+        # belonging to the attribute, for example:
+        # `composites = {'initial_key': ['B', 'minor']}`.
+
+        # The recursive traversal.
+        composites = defaultdict(list)
+        yield from self._data_to_scheme_child(data,
+                                              scheme,
+                                              composites)
+
+        # When composites has been populated, yield the composite attributes
+        # by joining their parts.
+        for composite_attr, value_parts in composites.items():
+            yield composite_attr, ' '.join(value_parts)
+
+    def _data_to_scheme_child(self, subdata, subscheme, composites):
+        """The recursive business logic of :meth:`_map_data_to_scheme`:
+        Traverse two structures of nested dictionaries in parallel and `yield`
+        tuples of corresponding leaf nodes.
+        If a leaf node belongs to a composite attribute (is a `tuple`),
+        populate `composites` rather than yielding straight away.
+        All the child functions for a single traversal share the same
+        `composites` instance, which is passed along.
+        """
+        for k, v in subscheme.items():
+            if k in subdata:
+                if type(v) == dict:
+                    yield from self._data_to_scheme_child(subdata[k],
+                                                          v,
+                                                          composites)
+                elif type(v) == tuple:
+                    composite_attribute, part_number = v
+                    attribute_parts = composites[composite_attribute]
+                    # Parts are not guaranteed to be inserted in order
+                    while len(attribute_parts) <= part_number:
+                        attribute_parts.append('')
+                    attribute_parts[part_number] = subdata[k]
+                else:
+                    yield v, subdata[k]
+            else:
+                self._log.warning('Acousticbrainz did not provide info '
+                                  'about {}', k)
+                self._log.debug('Data {} could not be mapped to scheme {} '
+                                'because key {} was not found', subdata, v, k)
+
+ABSCHEME = {
+    'highlevel': {
+        'danceability': {
+            'all': {
+            }
+        },
+        'gender': {
+            'value': 'gender'
+        },
+        'genre_rosamerica': {
+            'value': 'genre_rosamerica'
+        },
+        'mood_acoustic': {
+            'all': {
+                'acoustic': 'mood_acoustic'
+            }
+        },
+        'mood_aggressive': {
+            'all': {
+                'aggressive': 'mood_aggressive'
+            }
+        },
+        'mood_electronic': {
+            'all': {
+                'electronic': 'mood_electronic'
+            }
+        },
+        'mood_happy': {
+            'all': {
+                'happy': 'mood_happy'
+            }
+        },
+        'mood_party': {
+            'all': {
+                'party': 'mood_party'
+            }
+        },
+        'mood_relaxed': {
+            'all': {
+                'relaxed': 'mood_relaxed'
+            }
+        },
+        'mood_sad': {
+            'all': {
+                'sad': 'mood_sad'
+            }
+        },
+        'moods_mirex': {
+            'value': 'moods_mirex'
+        },
+        'ismir04_rhythm': {
+            'value': 'rhythm'
+        },
+        'tonal_atonal': {
+            'all': {
+                'tonal': 'tonal'
+            }
+        },
+        'timbre': {
+            'value': 'timbre'
+        },
+        'voice_instrumental': {
+            'value': 'voice_instrumental'
+        },
+    },
+    'lowlevel': {
+        'average_loudness': 'average_loudness'
+    },
+    'rhythm': {
+        'bpm': 'bpm',
+        'danceability': 'danceable'
+    },
+    'tonal': {
+        'chords_changes_rate': 'chords_changes_rate',
+        'chords_key': 'chords_key',
+        'chords_number_rate': 'chords_number_rate',
+        'chords_scale': 'chords_scale',
+        'key_key': ('initial_key', 0),
+        'key_scale': ('initial_key', 1),
+        'key_strength': 'key_strength'
+
+    }
+}
